# -*- coding: utf-8 -*-
"""Materi-7- Persamaan-Laplace-Potensial-Listrik-Soal1-Syafrudin_Fahrul_Anas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BvB01j1IKt8nCymc5Z7WQB4X-Dpksk98
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.ndimage import convolve, generate_binary_structure

# Dimensi dan parameter grid
N = 100  # Ukuran grid
iters = 2000  # Jumlah iterasi

# Membuat grid awal dengan sebagian area panas (1) dan sebagian area dingin (0)
grid = np.zeros((N, N, N)) + 0.5  # Inisialisasi grid dengan nilai menengah (0.5)

# Menentukan area panas dan dingin pada posisi tertentu
grid[30:70, 30:70, 40] = 1  # Area panas di z = 40
grid[30:70, 30:70, 90] = 0  # Area dingin di z = 90

# Mask untuk area dengan suhu tetap
mask_pos = grid == 1  # Mask untuk suhu tetap panas
mask_neg = grid == 0  # Mask untuk suhu tetap dingin

# Kernel konvolusi untuk penyebaran panas
kern = generate_binary_structure(3, 1).astype(float) / 6
kern[1, 1, 1] = 0  # Menetapkan pusat kernel ke 0 agar tidak memperbarui titik itu sendiri

# Fungsi kondisi batas Neumann (membatasi nilai di tepi grid)
def neumann(a):
    a[0, :, :] = a[1, :, :]
    a[-1, :, :] = a[-2, :, :]
    a[:, 0, :] = a[:, 1, :]
    a[:, -1, :] = a[:, -2, :]
    a[:, :, 0] = a[:, :, 1]
    a[:, :, -1] = a[:, :, -2]
    return a

# Array untuk menyimpan error pada setiap iterasi
err = []

# Proses iterasi untuk memperbarui grid berdasarkan penyebaran panas
for i in range(iters):
    grid_updated = convolve(grid, kern, mode='constant')  # Konvolusi dengan kernel
    grid_updated = neumann(grid_updated)  # Terapkan kondisi batas Neumann
    grid_updated[mask_pos] = 1  # Set suhu tetap pada area panas
    grid_updated[mask_neg] = 0  # Set suhu tetap pada area dingin
    err.append(np.mean((grid - grid_updated) ** 2))  # Hitung error rata-rata kuadrat
    grid = grid_updated  # Update grid

# Visualisasi distribusi suhu pada potongan z = 60
slc = 60  # Potongan yang akan divisualisasikan
plt.figure(figsize=(6, 5))
CS = plt.contour(np.arange(N) / N, np.arange(N) / N, grid[:, :, slc], levels=40)
plt.clabel(CS, CS.levels, inline=True, fontsize=6)
plt.xlabel('$x/x_0$')
plt.ylabel('$y/y_0$')
plt.title(f'Suhu pada potongan z = {slc}')
plt.show()

# Visualisasi error dari setiap iterasi
plt.figure()
plt.semilogy(np.sqrt(np.array(err)), label='Error RMSE')
plt.legend()
plt.xlabel('Iteration', fontsize=14)
plt.ylabel('RMSE')
plt.title('Error RMSE dari Iterasi')
plt.grid()
plt.show()